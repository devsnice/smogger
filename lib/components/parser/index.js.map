{"version":3,"sources":["../../../src/components/parser/index.js"],"names":["SPEC","getSpec","undefined","Error","parseRef","ref","slice","setSpec","spec","getMethodModel","path","method","paths","toLowerCase","resolveRef","schema","$ref","getResponse","status","contentType","responses","content","processor","cb","properties","reduce","result","key","property","combiner","items","oneOf","anyOf","allOf","map","min","minItems","max","maxItems","Array","random","int","fill"],"mappings":"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","sourcesContent":["import type { ContentType, HTTPMethod, Method, Schema } from \"../../types/Swagger\";\nimport { entries, objectPath } from \"../../utils/utils\";\nimport { allOf, anyOf, oneOf } from \"./combiners\";\nimport random from \"random\";\n\nlet SPEC = null;\n\nconst getSpec = () => {\n  if (SPEC === undefined) { throw new Error(`Spec didn't loaded (or passed to parser). Use setSpec()`); }\n  return SPEC;\n};\n\nconst parseRef = (ref: string) => objectPath(getSpec(), ref.slice(2), '/');\n\nexport const setSpec = spec => SPEC = spec;\n\nexport const getMethodModel: (path: string, method: HTTPMethod) => Method = (path, method) => {\n  return getSpec().paths[path][method.toLowerCase()];\n};\n\nexport const resolveRef = (schema: Schema) => {\n  if ('$ref' in schema) { return parseRef(schema.$ref); }\n  return schema;\n};\n\nexport const getResponse: (method: Method, status?: number, contentType?: ContentType) => Schema\n  = (method, status = 200, contentType = 'application/json') => {\n  const schema = method.responses[status].content[contentType].schema;\n  return resolveRef(schema);\n};\n\nexport const processor: (schema: Schema, cb: (data: Schema, next: (any) => void) => any) => any = (schema, cb) => {\n  if ('$ref' in schema) {\n    return processor(resolveRef(schema), cb);\n  }\n\n  if ('properties' in schema) {\n    return entries(schema.properties).reduce((result, [key, property]) => {\n      result[key] = processor(property, cb);\n      return result;\n    }, {});\n  }\n\n  if ('items' in schema) {\n    let combiner = () => schema.items;\n    if ('oneOf' in schema.items) {combiner = oneOf(schema.items.oneOf)}\n    if ('anyOf' in schema.items) {combiner = anyOf(schema.items.anyOf)}\n    if ('allOf' in schema.items) {combiner = allOf(schema.items.allOf.map(resolveRef))}\n    const min = schema.minItems || 0;\n    const max = schema.maxItems || 15;\n\n    return new Array(random.int(min, max)).fill().map(() => processor(combiner(), cb));\n  }\n\n  if ('oneOf' in schema || 'anyOf' in schema || 'allOf' in schema) {\n    let combiner = () => schema;\n    if ('oneOf' in schema) {combiner = oneOf(schema.oneOf)}\n    if ('anyOf' in schema) {combiner = anyOf(schema.anyOf)}\n    if ('allOf' in schema) {combiner = allOf(schema.allOf.map(resolveRef))}\n\n    return processor(combiner(), cb);\n  }\n\n  return cb(schema);\n};\n"],"file":"index.js"}