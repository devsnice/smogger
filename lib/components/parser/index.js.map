{"version":3,"sources":["../../../src/components/parser/index.js"],"names":["SPEC","getSpec","undefined","Error","parseRef","ref","slice","setSpec","spec","getMethodModel","path","method","paths","toLowerCase","resolveRef","schema","$ref","getResponse","status","contentType","responses","content","processor","cb","mutators","next","bind","properties","reduce","result","key","property","map","item","items","combiner","oneOf","anyOf","allOf"],"mappings":"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","sourcesContent":["import type { ArrayModificator, ContentType, HTTPMethod, Method, Schema, SchemaMain } from \"../../types/Swagger\";\nimport { entries, objectPath } from \"../../utils/utils\";\nimport { allOf, anyOf, oneOf } from \"./combiners\";\n\nexport type MutatorItems = (schema: SchemaMain & ArrayModificator) => Array<any>;\nexport type Mutators = {\n  items?: MutatorItems\n};\n\nlet SPEC = null;\n\nconst getSpec = () => {\n  if (SPEC === undefined) { throw new Error(`Spec didn't loaded (or passed to parser). Use setSpec()`); }\n  return SPEC;\n};\n\nconst parseRef = (ref: string) => objectPath(getSpec(), ref.slice(2), '/');\n\nexport const setSpec = spec => SPEC = spec;\n\nexport const getMethodModel: (path: string, method: HTTPMethod) => Method = (path, method) => {\n  return getSpec().paths[path][method.toLowerCase()];\n};\n\nexport const resolveRef = (schema: Schema) => {\n  if ('$ref' in schema) { return parseRef(schema.$ref); }\n  return schema;\n};\n\nexport const getResponse: (method: Method, status?: number, contentType?: ContentType) => Schema\n  = (method, status = 200, contentType = 'application/json') => {\n  const schema = method.responses[status].content[contentType].schema;\n  return resolveRef(schema);\n};\n\nexport const processor: (cb: (data: Schema) => any, mutators: Mutators, schema: Schema) => any\n  = (cb, mutators, schema) => {\n  const next = processor.bind(this, cb, mutators);\n  if ('$ref' in schema) {\n    return next(resolveRef(schema));\n  }\n\n  if ('properties' in schema) {\n    return entries(schema.properties).reduce((result, [key, property]) => {\n      result[key] = next(property);\n      return result;\n    }, {});\n  }\n\n  if ('items' in schema) {\n    if (mutators['items']) {\n      return mutators['items'](schema).map(item => next(item));\n    }\n    return next(schema.items);\n  }\n\n  if ('oneOf' in schema || 'anyOf' in schema || 'allOf' in schema) {\n    let combiner = () => schema;\n    if ('oneOf' in schema) {combiner = oneOf(schema.oneOf)}\n    if ('anyOf' in schema) {combiner = anyOf(schema.anyOf)}\n    if ('allOf' in schema) {combiner = allOf(schema.allOf.map(resolveRef))}\n\n    return next(combiner());\n  }\n\n  return cb(schema);\n};\n"],"file":"index.js"}