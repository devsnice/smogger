{"version":3,"sources":["../../../src/components/parser/index.js"],"names":["SPEC","getSpec","undefined","Error","parseRef","ref","slice","setSpec","spec","getMethodModel","path","method","paths","toLowerCase","resolveRef","schema","$ref","getResponse","status","contentType","responses","content"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,MAAID,IAAI,KAAKE,SAAb,EAAwB;AAAE,UAAM,IAAIC,KAAJ,CAAW,yDAAX,CAAN;AAA6E;;AACvG,SAAOH,IAAP;AACD,CAHD;;AAKA,MAAMI,QAAQ,GAAIC,GAAD,IAAiB,uBAAWJ,OAAO,EAAlB,EAAsBI,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAtB,EAAoC,GAApC,CAAlC;;AAEO,MAAMC,OAAO,GAAGC,IAAI,IAAIR,IAAI,GAAGQ,IAA/B;;;;AAEA,MAAMC,cAA4D,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC5F,SAAOV,OAAO,GAAGW,KAAV,CAAgBF,IAAhB,EAAsBC,MAAM,CAACE,WAAP,EAAtB,CAAP;AACD,CAFM;;;;AAIA,MAAMC,UAAU,GAAIC,MAAD,IAAoB;AAC5C,MAAI,UAAUA,MAAd,EAAsB;AAAE,WAAOX,QAAQ,CAACW,MAAM,CAACC,IAAR,CAAf;AAA+B;;AACvD,SAAOD,MAAP;AACD,CAHM;;;;AAKA,MAAME,WAAmF,GAC5F,CAACN,MAAD,EAASO,MAAM,GAAG,GAAlB,EAAuBC,WAAW,GAAG,kBAArC,KAA4D;AAC9D,QAAMJ,MAAM,GAAGJ,MAAM,CAACS,SAAP,CAAiBF,MAAjB,EAAyBG,OAAzB,CAAiCF,WAAjC,EAA8CJ,MAA7D;AACA,SAAOD,UAAU,CAACC,MAAD,CAAjB;AACD,CAJM","sourcesContent":["import SwaggerParser from \"swagger-parser\";\nimport type { ContentType, HTTPMethod, Method, Schema } from \"../../types/Swagger\";\nimport { objectPath } from \"../../utils/utils\";\n\nlet SPEC = null;\n\nconst getSpec = () => {\n  if (SPEC === undefined) { throw new Error(`Spec didn't loaded (or passed to parser). Use setSpec()`); }\n  return SPEC;\n};\n\nconst parseRef = (ref: string) => objectPath(getSpec(), ref.slice(2), '/');\n\nexport const setSpec = spec => SPEC = spec;\n\nexport const getMethodModel: (path: string, method: HTTPMethod) => Method = (path, method) => {\n  return getSpec().paths[path][method.toLowerCase()];\n};\n\nexport const resolveRef = (schema: Schema) => {\n  if ('$ref' in schema) { return parseRef(schema.$ref); }\n  return schema;\n};\n\nexport const getResponse: (method: Method, status?: number, contentType?: ContentType) => Schema\n  = (method, status = 200, contentType = 'application/json') => {\n  const schema = method.responses[status].content[contentType].schema;\n  return resolveRef(schema);\n};\n"],"file":"index.js"}