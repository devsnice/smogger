{"version":3,"sources":["../../../src/components/parser/index.js"],"names":["getMethodModel","spec","path","method","paths","toLowerCase","getResponseModel","status","contentType","responses","content","schema","processor","cb","mutators","next","bind","properties","reduce","result","key","property","items","map","item","combiner","oneOf","anyOf","allOf"],"mappings":";;;;;;;AAAA;;AACA;;AASO,MAAMA,cAA8E,GACzFC,IAAI,IAAI,CAACC,IAAD,EAAOC,MAAP,KAAkBF,IAAI,CAACG,KAAL,CAAWF,IAAX,EAAiBC,MAAM,CAACE,WAAP,EAAjB,CADrB;;;;AAGA,MAAMC,gBAAsF,GAC/F,CAACH,MAAD,EAASI,MAAM,GAAG,GAAlB,EAAuBC,WAAW,GAAG,kBAArC,KAA4DL,MAAM,CAACM,SAAP,CAAiBF,MAAjB,EAAyBG,OAAzB,CAAiCF,WAAjC,EAA8CG,MADvG;;;;AAGA,MAAMC,SAAiF,GAC1F,CAACC,EAAD,EAAKC,QAAL,EAAeH,MAAf,KAA0B;AAC5B,QAAMI,IAAI,GAAGH,SAAS,CAACI,IAAV,SAAqBH,EAArB,EAAyBC,QAAzB,CAAb;;AAEA,MAAIH,MAAM,CAACM,UAAX,EAAuB;AACrB,WAAO,oBAAQN,MAAM,CAACM,UAAf,EAA2BC,MAA3B,CAAkC,CAACC,MAAD,EAAS,CAACC,GAAD,EAAMC,QAAN,CAAT,KAA6B;AACpEF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcL,IAAI,CAACM,QAAD,CAAlB;AACA,aAAOF,MAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAED,MAAIR,MAAM,CAACW,KAAX,EAAkB;AAChB,QAAIR,QAAQ,CAACQ,KAAb,EAAoB;AAClB,aAAOR,QAAQ,CAACQ,KAAT,CAAeX,MAAf,EAAuBY,GAAvB,CAA2BC,IAAI,IAAIT,IAAI,CAACS,IAAD,CAAvC,CAAP;AACD;;AACD,WAAOT,IAAI,CAACJ,MAAM,CAACW,KAAR,CAAX;AACD;;AAED,MAAI,WAAWX,MAAX,IAAqB,WAAWA,MAAhC,IAA0C,WAAWA,MAAzD,EAAiE;AAC/D,QAAIc,QAAQ,GAAG,MAAMd,MAArB;;AACA,QAAIA,MAAM,CAACe,KAAX,EAAkB;AAACD,MAAAA,QAAQ,GAAG,sBAAMd,MAAM,CAACe,KAAb,CAAX;AAA+B;;AAClD,QAAIf,MAAM,CAACgB,KAAX,EAAkB;AAACF,MAAAA,QAAQ,GAAG,sBAAMd,MAAM,CAACgB,KAAb,CAAX;AAA+B;;AAClD,QAAIhB,MAAM,CAACiB,KAAX,EAAkB;AAACH,MAAAA,QAAQ,GAAG,sBAAMd,MAAM,CAACiB,KAAb,CAAX;AAA+B;;AAElD,WAAOb,IAAI,CAACU,QAAQ,EAAT,CAAX;AACD;;AAED,SAAOZ,EAAE,CAACF,MAAD,CAAT;AACD,CA5BM","sourcesContent":["import { entries } from \"../utils\";\nimport { allOf, anyOf, oneOf } from \"./combiners\";\nimport type { OpenAPI, Operation, Paths, Schema } from 'openapi3-flowtype-definition'\n\nexport type MutatorItems = (schema: Schema) => Array<any>;\nexport type Mutators = {\n  items?: MutatorItems\n};\n\n\nexport const getMethodModel: (spec: OpenAPI) => (path: string, method: string) => Operation =\n  spec => (path, method) => spec.paths[path][method.toLowerCase()];\n\nexport const getResponseModel: (method: Operation, status?: number, contentType?: string) => Schema\n  = (method, status = 200, contentType = 'application/json') => method.responses[status].content[contentType].schema;\n\nexport const processor: (cb: (data: Schema) => any, mutators: Mutators, schema: Schema) => any\n  = (cb, mutators, schema) => {\n  const next = processor.bind(this, cb, mutators);\n\n  if (schema.properties) {\n    return entries(schema.properties).reduce((result, [key, property]) => {\n      result[key] = next(property);\n      return result;\n    }, {});\n  }\n\n  if (schema.items) {\n    if (mutators.items) {\n      return mutators.items(schema).map(item => next(item));\n    }\n    return next(schema.items);\n  }\n\n  if ('oneOf' in schema || 'anyOf' in schema || 'allOf' in schema) {\n    let combiner = () => schema;\n    if (schema.oneOf) {combiner = oneOf(schema.oneOf)}\n    if (schema.anyOf) {combiner = anyOf(schema.anyOf)}\n    if (schema.allOf) {combiner = allOf(schema.allOf)}\n\n    return next(combiner());\n  }\n\n  return cb(schema);\n};\n"],"file":"index.js"}