{"version":3,"sources":["../../../src/components/router/generate.js"],"names":["log","path","methods","console","Object","keys","forEach","method","setRouteName","operationId","defaultResponse","ctx","next","body","JSON","stringify","params","getRouterMethod","router","type","get","post","delete","put","createMethod","bind","createRouter","paths","Router","createMethodWithRouter","map","reduce","bindMethodToRouter","run"],"mappings":";;;;;;;AAAA;;AACA;;;;AASA,MAAMA,GAAG,GAAG,CAAC,CAACC,IAAD,EAAOC,OAAP,CAAD,KAAqB;AAC/BC,EAAAA,OAAO,CAACH,GAAR,CAAa,eAAcC,IAAK,EAAhC;AACAE,EAAAA,OAAO,CAACH,GAAR,CAAa,cAAb;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6BC,MAAM,IAAI;AACrCJ,IAAAA,OAAO,CAACH,GAAR,CAAa,KAAIO,MAAO,EAAxB;AACD,GAFD;AAGAJ,EAAAA,OAAO,CAACH,GAAR,CAAY,EAAZ;AACA,SAAO,CAACC,IAAD,EAAOC,OAAP,CAAP;AACD,CARD;;AAUA,MAAMM,YAAY,GAAIC,WAAD,IAAkCA,WAAW,IAAI,IAAtE;;AACA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrCD,EAAAA,GAAG,CAACE,IAAJ,GAAY,WAAUC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,MAAnB,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,EAA1D;AACAJ,EAAAA,IAAI;AACL,CAHD;;AAKA,MAAMK,eAAe,GAAIC,MAAD,IAAqBC,IAAD,IAAkB;AAC5D,UAAQA,IAAR;AACE,SAAK,KAAL;AACE,aAAOD,MAAM,CAACE,GAAd;;AACF,SAAK,MAAL;AACE,aAAOF,MAAM,CAACG,IAAd;;AACF,SAAK,QAAL;AACE,aAAOH,MAAM,CAACI,MAAd;;AACF,SAAK,KAAL;AACE,aAAOJ,MAAM,CAACK,GAAd;;AACF,SAAK,QAAL;AACE,aAAOL,MAAM,CAACG,IAAd;;AACF;AACE,aAAOH,MAAM,CAACE,GAAd;AAZJ;AAcD,CAfD;;AAiBA,MAAMI,YAAY,GAAG,CACnBN,MADmB,CACJ;AADI,KAEhB,CACHjB,IADG,CACE;AADF,KAEA,CACHkB,IADG,CAEa;AAFb,EAEH;AAAEV,EAAAA;AAAF,CAFG,KAIHQ,eAAe,CAACC,MAAD,CAAf,CAAwBC,IAAxB,EAA8BM,IAA9B,CACEP,MADF,EAEEV,YAAY,CAACC,WAAD,CAFd,EAGER,IAHF,EAIES,eAJF,CARF;;AAeO,MAAMgB,YAAY,GAAIC,KAAD,IAAkB;AAC5C,QAAMT,MAAM,GAAG,IAAIU,kBAAJ,EAAf;AACA,QAAMC,sBAAsB,GAAGL,YAAY,CAACN,MAAD,CAA3C;AAEA,sBAAQS,KAAR,EACGG,GADH,CACO9B,GADP,EAEG8B,GAFH,CAEO,CAAC,CAAC7B,IAAD,EAAOC,OAAP,CAAD,KAAqB,CAAC,6BAAiBD,IAAjB,CAAD,EAAyBC,OAAzB,CAF5B,EAE+D;AAF/D,GAGG4B,GAHH,CAGO,CAAC,CAAC7B,IAAD,EAAOC,OAAP,CAAD,KAAqB,CAAC2B,sBAAsB,CAAC5B,IAAD,CAAvB,EAA+B,oBAAQC,OAAR,CAA/B,CAH5B,EAG8E;AAH9E,GAIG6B,MAJH,CAKI,uBACE,CAAC,CAACC,kBAAD,EAAqB9B,OAArB,CAAD,KACEA,OAAO,CAAC4B,GAAR,CAAY,yBAAaE,kBAAb,CAAZ,CAFJ,CAEkD;AAFlD,GALJ,EASI,EATJ,EAWG1B,OAXH,CAWW2B,UAXX,EAJ4C,CAe3B;;AAEjB,SAAOf,MAAP;AACD,CAlBM","sourcesContent":["import Router from 'koa-router';\nimport {\n  normalizer,\n  entries,\n  run,\n  spreadToArgs,\n  formatRouterPath\n} from '../utils';\nimport type { PathItem, Paths } from 'openapi3-flowtype-definition';\n\nconst log = ([path, methods]) => {\n  console.log(`Create path ${path}`);\n  console.log(`With methods`);\n  Object.keys(methods).forEach(method => {\n    console.log(`– ${method}`);\n  });\n  console.log('');\n  return [path, methods];\n};\n\nconst setRouteName = (operationId: string): ?string => operationId || null;\nconst defaultResponse = (ctx, next) => {\n  ctx.body = `params: ${JSON.stringify(ctx.params, null, 2)}`;\n  next();\n};\n\nconst getRouterMethod = (router: Router) => (type: string) => {\n  switch (type) {\n    case 'get':\n      return router.get;\n    case 'post':\n      return router.post;\n    case 'delete':\n      return router.delete;\n    case 'put':\n      return router.put;\n    case 'update':\n      return router.post;\n    default:\n      return router.get;\n  }\n};\n\nconst createMethod = (\n  router: Router // save router\n) => (\n  path // save path\n) => (\n  type: string,\n  { operationId } // bind method to router with saved path\n) =>\n  getRouterMethod(router)(type).bind(\n    router,\n    setRouteName(operationId),\n    path,\n    defaultResponse\n  );\n\nexport const createRouter = (paths: Paths) => {\n  const router = new Router();\n  const createMethodWithRouter = createMethod(router);\n\n  entries(paths)\n    .map(log)\n    .map(([path, methods]) => [formatRouterPath(path), methods]) // /path/{param} => /path/:param\n    .map(([path, methods]) => [createMethodWithRouter(path), entries(methods)]) // Создаем функцию для привязки метода к пути и получаем [methodName, methodParams]\n    .reduce(\n      normalizer(\n        ([bindMethodToRouter, methods]) =>\n          methods.map(spreadToArgs(bindMethodToRouter)) // bindMethodToRouter <- methodProps, возвращаем функцию привязки метода со всеми пропсами\n      ),\n      []\n    )\n    .forEach(run); // Привязываем каждый метод к роутеру\n\n  return router;\n};\n"],"file":"generate.js"}