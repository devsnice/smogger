{"version":3,"sources":["../../../src/components/router/generate.js"],"names":["log","path","methods","console","Object","keys","forEach","method","setRouteName","operationId","defaultResponse","ctx","next","body","JSON","stringify","params","createMethod","router","type","bind","createRouter","paths","config","Router","createMethodWithRouter","map","reduce","bindMethodToRouter","run"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGA,MAAMA,GAAG,GAAG,CAAC,CAACC,IAAD,EAAOC,OAAP,CAAD,KAAqB;AAC/BC,EAAAA,OAAO,CAACH,GAAR,CAAa,eAAcC,IAAK,EAAhC;AACAE,EAAAA,OAAO,CAACH,GAAR,CAAa,cAAb;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6BC,MAAM,IAAI;AACrCJ,IAAAA,OAAO,CAACH,GAAR,CAAa,KAAIO,MAAO,EAAxB;AACD,GAFD;AAGAJ,EAAAA,OAAO,CAACH,GAAR;AACA,SAAO,CAACC,IAAD,EAAOC,OAAP,CAAP;AACD,CARD;;AAUA,MAAMM,YAAY,GAAIC,WAAD,IAAkCA,WAAW,IAAI,IAAtE;;AACA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrCD,EAAAA,GAAG,CAACE,IAAJ,GAAY,WAAUC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,MAAnB,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,EAA1D;AACAJ,EAAAA,IAAI;AACL,CAHD;;AAKA,MAAMK,YAAY,GAChBC,MAAM,IAAI;AACRjB,IAAI,IAAI;AACN,CAACkB,IAAD,EAAO;AAACV,EAAAA;AAAD,CAAP,KAAyB;AACvBS,MAAM,CAACC,IAAD,CAAN,CAAaC,IAAb,CAAkBF,MAAlB,EAA0BV,YAAY,CAACC,WAAD,CAAtC,EAAqDR,IAArD,EAA2DS,eAA3D,CAJR;;AAMO,MAAMW,YAAY,GAAG,CAACC,KAAD,EAAeC,MAAM,GAAG,EAAxB,KAA+B;AACzD,QAAML,MAAM,GAAG,IAAIM,kBAAJ,CAAWD,MAAX,CAAf;AACA,QAAME,sBAAsB,GAAGR,YAAY,CAACC,MAAD,CAA3C;AAEA,sBAAQI,KAAR,EACGI,GADH,CACO1B,GADP,EAEG0B,GAFH,CAEO,CAAC,CAACzB,IAAD,EAAOC,OAAP,CAAD,KAAqB,CAAC,6BAAiBD,IAAjB,CAAD,EAAyBC,OAAzB,CAF5B,EAE+D;AAF/D,GAGGwB,GAHH,CAGO,CAAC,CAACzB,IAAD,EAAOC,OAAP,CAAD,KAAqB,CAACuB,sBAAsB,CAACxB,IAAD,CAAvB,EAA+B,oBAAQC,OAAR,CAA/B,CAH5B,EAG8E;AAH9E,GAIGyB,MAJH,CAKI,uBACE,CAAC,CAACC,kBAAD,EAAqB1B,OAArB,CAAD,KAAmCA,OAAO,CAACwB,GAAR,CAAY,yBAAaE,kBAAb,CAAZ,CADrC,CACmF;AADnF,GALJ,EAOO,EAPP,EASGtB,OATH,CASWuB,UATX,EAJyD,CAaxC;;AAEjB,SAAOX,MAAP;AACD,CAhBM","sourcesContent":["import Router from 'koa-router';\nimport { normalizer, entries, run, spreadToArgs, formatRouterPath } from \"../../utils/utils\";\nimport type { Paths } from \"../../types/Swagger\";\n\nconst log = ([path, methods]) => {\n  console.log(`Create path ${path}`);\n  console.log(`With methods`);\n  Object.keys(methods).forEach(method => {\n    console.log(`– ${method}`);\n  });\n  console.log();\n  return [path, methods];\n};\n\nconst setRouteName = (operationId: string): ?string => operationId || null;\nconst defaultResponse = (ctx, next) => {\n  ctx.body = `params: ${JSON.stringify(ctx.params, null, 2)}`;\n  next();\n};\n\nconst createMethod =\n  router => // save router\n    path => // save path\n      (type, {operationId}) => // bind method to router with saved path\n        router[type].bind(router, setRouteName(operationId), path, defaultResponse);\n\nexport const createRouter = (paths: Paths, config = {}) => {\n  const router = new Router(config);\n  const createMethodWithRouter = createMethod(router);\n\n  entries(paths)\n    .map(log)\n    .map(([path, methods]) => [formatRouterPath(path), methods]) // /path/{param} => /path/:param\n    .map(([path, methods]) => [createMethodWithRouter(path), entries(methods)]) // Создаем функцию для привязки метода к пути и получаем [methodName, methodParams]\n    .reduce(\n      normalizer(\n        ([bindMethodToRouter, methods]) => methods.map(spreadToArgs(bindMethodToRouter)) // bindMethodToRouter <- methodProps, возвращаем функцию привязки метода со всеми пропсами\n      ), []\n    )\n    .forEach(run); // Привязываем каждый метод к роутеру\n\n  return router;\n};\n"],"file":"generate.js"}