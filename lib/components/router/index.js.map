{"version":3,"sources":["../../../src/components/router/index.js"],"names":["dataToResponse","data","ctx","body","JSON","stringify","exposeRequestProps","req","method","_matchedRoute","path","createMiddleware","app","middlewares","use","next","matched","length","processor","createHTTPServer","port","paths","Koa","router","routes","allowedMethods","listen","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAMA,MAAMA,cAAkD,GAAG,CAACC,IAAD,EAAOC,GAAP,KACxDA,GAAG,CAACC,IAAJ,GAAWC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CADd;;AAQA,MAAMK,kBAE+B,GAAGJ,GAAG,IAAI;AAC7C,QAAM;AACJK,IAAAA,GAAG,EAAE;AAAEC,MAAAA;AAAF,KADD;AAEJC,IAAAA;AAFI,MAGFP,GAHJ;AAIA,QAAMQ,IAAI,GAAG,8BAAkBD,aAAlB,CAAb;AACA,SAAO;AACLC,IAAAA,IADK;AAELF,IAAAA;AAFK,GAAP;AAID,CAZD;;AAcO,MAAMG,gBAAkC,GAAG,CAChDC,GADgD,EAEhDC,WAFgD,KAIhDD,GAAG,CAACE,GAAJ,CAAQ,CAACZ,GAAD,EAAMa,IAAN,KAAe;AACrB,MAAId,IAAI,GAAG,EAAX;;AACA,MAAI,CAACC,GAAG,CAACc,OAAJ,CAAYC,MAAjB,EAAyB;AACvB,WAAOF,IAAI,EAAX;AACD;;AACD,QAAM;AAAEL,IAAAA,IAAF;AAAQF,IAAAA;AAAR,MAAmBF,kBAAkB,CAACJ,GAAD,CAA3C;AACA,QAAMgB,SAAS,GAAG,oBAAQ,GAAGL,WAAX,CAAlB;AACAZ,EAAAA,IAAI,GAAGiB,SAAS,CAACR,IAAD,EAAOF,MAAP,EAAeP,IAAf,CAAhB;AACAD,EAAAA,cAAc,CAACC,IAAD,EAAOC,GAAP,CAAd;AACD,CATD,CAJK;;;;AAeA,MAAMiB,gBAAgB,GAAG,CAC9B;AAAEC,EAAAA;AAAF,CAD8B,EAE9BP,WAF8B,KAG1BQ,KAAD,IAAkC;AACrC,QAAMT,GAAG,GAAG,IAAIU,YAAJ,EAAZ;AACA,QAAMC,MAAM,GAAG,4BAAaF,KAAb,CAAf;AACAT,EAAAA,GAAG,CAACE,GAAJ,CAAQS,MAAM,CAACC,MAAP,EAAR,EAAyBV,GAAzB,CAA6BS,MAAM,CAACE,cAAP,EAA7B;AAEAd,EAAAA,gBAAgB,CAACC,GAAD,EAAMC,WAAN,CAAhB;AAEAD,EAAAA,GAAG,CAACc,MAAJ,CAAWN,IAAX;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BR,IAAK,EAA5C;AACA,SAAOR,GAAP;AACD,CAbM","sourcesContent":["import Koa from 'koa';\nimport { createRouter } from './generate';\nimport { compose, formatSwaggerPath } from '../utils';\nimport type Application, { Context } from 'koa';\nimport type { PathItem } from 'openapi3-flowtype-definition';\n\nexport type Middleware = (path: string, method: string, data?: any) => any;\n\nconst dataToResponse: (data: {}, ctx: Context) => string = (data, ctx) =>\n  (ctx.body = JSON.stringify(data));\n\ntype CreateMiddleware = (\n  router: Application,\n  processors: Array<Middleware>\n) => Application;\n\nconst exposeRequestProps: (\n  ctx: Context\n) => { path: string, method: string } = ctx => {\n  const {\n    req: { method },\n    _matchedRoute\n  } = ctx;\n  const path = formatSwaggerPath(_matchedRoute);\n  return {\n    path,\n    method\n  };\n};\n\nexport const createMiddleware: CreateMiddleware = (\n  app: Application,\n  middlewares: Middleware[]\n) =>\n  app.use((ctx, next) => {\n    let data = {};\n    if (!ctx.matched.length) {\n      return next();\n    }\n    const { path, method } = exposeRequestProps(ctx);\n    const processor = compose(...middlewares);\n    data = processor(path, method, data);\n    dataToResponse(data, ctx);\n  });\n\nexport const createHTTPServer = (\n  { port }: { port: number },\n  middlewares: Middleware[]\n) => (paths: PathItem): Application => {\n  const app = new Koa();\n  const router = createRouter(paths);\n  app.use(router.routes()).use(router.allowedMethods());\n\n  createMiddleware(app, middlewares);\n\n  app.listen(port);\n  console.log(`Mock server working on :${port}`);\n  return app;\n};\n"],"file":"index.js"}