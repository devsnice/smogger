{"version":3,"sources":["../../../src/components/router/index.js"],"names":["dataToResponse","data","ctx","body","JSON","stringify","exposeParams","params","req","method","_matchedRoute","path","model","createMiddleware","router","processors","use","next","matched","length","reduce","processor","Object","assign","e","status","error_message","message","error_stack","stack","listen","paths","port","app","Koa","routes","allowedMethods","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAOO,MAAMA,cAAkD,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAeA,GAAG,CAACC,IAAJ,GAAWC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAArF;;;;AAGA,MAAMK,YAA0B,GAAGJ,GAAG,IAAI;AAC/C,QAAM;AAACK,IAAAA,MAAD;AAASC,IAAAA,GAAG,EAAE;AAACC,MAAAA;AAAD,KAAd;AAAwBC,IAAAA;AAAxB,MAAyCR,GAA/C;AACA,QAAMS,IAAI,GAAG,8BAAkBD,aAAlB,CAAb;AACA,QAAME,KAAK,GAAG,4BAAeD,IAAf,EAAqBF,MAArB,CAAd;AACA,SAAO;AACLF,IAAAA,MADK;AAELK,IAAAA;AAFK,GAAP;AAID,CARM;;;;AAWA,MAAMC,gBAAkC,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwBD,MAAM,CAACE,GAAP,CAAW,CAACd,GAAD,EAAMe,IAAN,KAAe;AAClG,MAAIhB,IAAI,GAAG,EAAX;;AACA,MAAI,CAACC,GAAG,CAACgB,OAAJ,CAAYC,MAAjB,EAAyB;AAAE,WAAOF,IAAI,EAAX;AAAe;;AAC1C,QAAM;AAACV,IAAAA,MAAD;AAASK,IAAAA;AAAT,MAAkBN,YAAY,CAACJ,GAAD,CAApC;;AACA,MAAG;AACDD,IAAAA,IAAI,GAAGc,UAAU,CAACK,MAAX,CAAkB,CAACnB,IAAD,EAAOoB,SAAP,KAAqBC,MAAM,CAACC,MAAP,CAActB,IAAd,EAAoBoB,SAAS,CAACd,MAAD,EAASK,KAAT,EAAgBX,IAAhB,CAA7B,CAAvC,EAA4F,EAA5F,CAAP;AACD,GAFD,CAEC,OAAMuB,CAAN,EAAS;AACRtB,IAAAA,GAAG,CAACuB,MAAJ,GAAa,GAAb;AACAxB,IAAAA,IAAI,GAAG;AACLyB,MAAAA,aAAa,EAAG,wBAAuBF,CAAC,CAACG,OAAQ,EAD5C;AAELC,MAAAA,WAAW,EAAEJ,CAAC,CAACK;AAFV,KAAP;AAID;;AACD7B,EAAAA,cAAc,CAACC,IAAD,EAAOC,GAAP,CAAd;AACD,CAdyE,CAAnE;;;;AAgBA,MAAM4B,MAAM,GAAG,CAACC,KAAD,EAAe;AAAEC,EAAAA;AAAF,CAAf,KAAyD;AAC7E,QAAMC,GAAG,GAAG,IAAIC,YAAJ,EAAZ;AACA,QAAMpB,MAAM,GAAG,4BAAaiB,KAAb,CAAf;AACAE,EAAAA,GAAG,CACAjB,GADH,CACOF,MAAM,CAACqB,MAAP,EADP,EAEGnB,GAFH,CAEOF,MAAM,CAACsB,cAAP,EAFP;AAIAH,EAAAA,GAAG,CAACH,MAAJ,CAAWE,IAAX;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BN,IAAK,EAA5C;AACA,SAAOC,GAAP;AACD,CAVM","sourcesContent":["import Koa from 'koa';\nimport { createRouter } from \"./generate\";\nimport { formatSwaggerPath } from \"../../utils/utils\";\nimport { getMethodModel } from \"../parser\";\n\nimport type { RouteParams } from \"../../types/Router\";\nimport type { Method, Paths } from \"../../types/Swagger\";\nimport type Application, {Context} from 'koa';\n\nexport type Processor = (params: RouteParams, model: Method, data: any) => any;\nexport const dataToResponse: (data: {}, ctx: Context) => string = (data, ctx) => ctx.body = JSON.stringify(data);\ntype CreateMiddleware = (router: Application, processors: Array<Processor>) => Application;\ntype ExposeParams = (ctx: Context) => {params: RouteParams, model: Method};\nexport const exposeParams: ExposeParams = ctx => {\n  const {params, req: {method}, _matchedRoute} = ctx;\n  const path = formatSwaggerPath(_matchedRoute);\n  const model = getMethodModel(path, method);\n  return {\n    params,\n    model\n  };\n};\n\n\nexport const createMiddleware: CreateMiddleware = (router, processors) => router.use((ctx, next) => {\n  let data = {};\n  if (!ctx.matched.length) { return next() }\n  const {params, model} = exposeParams(ctx);\n  try{\n    data = processors.reduce((data, processor) => Object.assign(data, processor(params, model, data)), {});\n  }catch(e) {\n    ctx.status = 500;\n    data = {\n      error_message: `Smogger catch error: ${e.message}`,\n      error_stack: e.stack\n    };\n  }\n  dataToResponse(data, ctx);\n});\n\nexport const listen = (paths: Paths, { port }: {port: number}): Application => {\n  const app = new Koa();\n  const router = createRouter(paths);\n  app\n    .use(router.routes())\n    .use(router.allowedMethods());\n\n  app.listen(port);\n  console.log(`Mock server working on :${port}`);\n  return app;\n};\n"],"file":"index.js"}