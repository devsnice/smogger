{"version":3,"sources":["../../../src/components/router/index.js"],"names":["dataToResponse","data","ctx","body","JSON","stringify","exposeRequestProps","req","method","_matchedRoute","path","createMiddleware","app","middlewares","use","next","matched","length","processor","createHTTPServer","port","paths","Koa","router","routes","allowedMethods","listen","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAMA,MAAMA,cAAkD,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAeA,GAAG,CAACC,IAAJ,GAAWC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAArF;;AAGA,MAAMK,kBAAoE,GAAGJ,GAAG,IAAI;AAClF,QAAM;AAACK,IAAAA,GAAG,EAAE;AAACC,MAAAA;AAAD,KAAN;AAAgBC,IAAAA;AAAhB,MAAiCP,GAAvC;AACA,QAAMQ,IAAI,GAAG,8BAAkBD,aAAlB,CAAb;AACA,SAAO;AACLC,IAAAA,IADK;AAELF,IAAAA;AAFK,GAAP;AAID,CAPD;;AAUO,MAAMG,gBAAkC,GAAG,CAACC,GAAD,EAAmBC,WAAnB,KAAiDD,GAAG,CAACE,GAAJ,CAAQ,CAACZ,GAAD,EAAMa,IAAN,KAAe;AACxH,MAAId,IAAI,GAAG,EAAX;;AACA,MAAI,CAACC,GAAG,CAACc,OAAJ,CAAYC,MAAjB,EAAyB;AAAE,WAAOF,IAAI,EAAX;AAAe;;AAC1C,QAAM;AAACL,IAAAA,IAAD;AAAOF,IAAAA;AAAP,MAAiBF,kBAAkB,CAACJ,GAAD,CAAzC;AACA,QAAMgB,SAAS,GAAG,oBAAQ,GAAGL,WAAX,CAAlB;AACAZ,EAAAA,IAAI,GAAGiB,SAAS,CAACR,IAAD,EAAOF,MAAP,EAAeP,IAAf,CAAhB;AACAD,EAAAA,cAAc,CAACC,IAAD,EAAOC,GAAP,CAAd;AACD,CAPkG,CAA5F;;;;AASA,MAAMiB,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAA2BP,WAA3B,KAA0DQ,KAAD,IAAkC;AACzH,QAAMT,GAAG,GAAG,IAAIU,YAAJ,EAAZ;AACA,QAAMC,MAAM,GAAG,4BAAaF,KAAb,CAAf;AACAT,EAAAA,GAAG,CACAE,GADH,CACOS,MAAM,CAACC,MAAP,EADP,EAEGV,GAFH,CAEOS,MAAM,CAACE,cAAP,EAFP;AAIAd,EAAAA,gBAAgB,CAACC,GAAD,EAAMC,WAAN,CAAhB;AAEAD,EAAAA,GAAG,CAACc,MAAJ,CAAWN,IAAX;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BR,IAAK,EAA5C;AACA,SAAOR,GAAP;AACD,CAZM","sourcesContent":["import Koa from 'koa';\nimport { createRouter } from \"./generate\";\nimport { compose, formatSwaggerPath } from \"../../utils/utils\";\nimport type Application, {Context} from 'koa';\nimport type { PathItem } from \"openapi3-flowtype-definition\";\n\nexport type Middleware = (path: string, method: string, data?: any) => any;\n\nconst dataToResponse: (data: {}, ctx: Context) => string = (data, ctx) => ctx.body = JSON.stringify(data);\ntype CreateMiddleware = (router: Application, processors: Array<Middleware>) => Application;\n\nconst exposeRequestProps: (ctx: Context) => {path: string, method: string} = ctx => {\n  const {req: {method}, _matchedRoute} = ctx;\n  const path = formatSwaggerPath(_matchedRoute);\n  return {\n    path,\n    method\n  };\n};\n\n\nexport const createMiddleware: CreateMiddleware = (app: Application, middlewares: Middleware[]) => app.use((ctx, next) => {\n  let data = {};\n  if (!ctx.matched.length) { return next() }\n  const {path, method} = exposeRequestProps(ctx);\n  const processor = compose(...middlewares);\n  data = processor(path, method, data);\n  dataToResponse(data, ctx);\n});\n\nexport const createHTTPServer = ({ port }: {port: number}, middlewares: Middleware[]) => (paths: PathItem): Application => {\n  const app = new Koa();\n  const router = createRouter(paths);\n  app\n    .use(router.routes())\n    .use(router.allowedMethods());\n\n  createMiddleware(app, middlewares);\n\n  app.listen(port);\n  console.log(`Mock server working on :${port}`);\n  return app;\n};\n"],"file":"index.js"}