{"version":3,"sources":["../../../src/components/mocker/index.js"],"names":["createEnum","enumElements","createDate","faker","date","between","Date","createBoolean","random","boolean","createImageLink","provider","replace","createNumber","min","max","options","number","createString","format","wordsCount","int","words","slice","isNumber","type","createFakeData","imageProvider","minimum","maximum","minLength","maxLength","rest","enum","generateArrayItems","minItems","maxItems","items","arrayLength","Array","fill","mockData","params","model"],"mappings":"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","sourcesContent":["import faker from 'faker';\nimport random from 'random';\nimport { randomElement } from \"../../utils/utils\";\nimport { getResponse, processor } from \"../parser\";\nimport type { Processor } from \"../router\";\nimport type { Schema } from \"../../types/Swagger\";\n\ntype Config = {\n  imageProvider: string;\n}\n\nconst createEnum = (enumElements: Array<string | number | boolean>) => randomElement(enumElements);\nconst createDate = () => faker.date.between(new Date('2015-01-01'), new Date('2021-01-01'));\nconst createBoolean = () => random.boolean();\nconst createImageLink = (provider: string) => provider.replace('<width>', '200').replace('<height>', '300');\nconst createNumber = (min: number = 0, max: number = 9999999) => {\n  const options = {min, max};\n  return faker.random.number(options);\n};\nconst createString = (format: string = 'words') => (min: number, max: number) => {\n  const wordsCount: number = random.int(min, max);\n  const words = faker.random[format](wordsCount);\n  return words.slice(0, max);\n};\n\nconst isNumber = (type: string): boolean => (type === 'number' || type === 'integer');\n\nconst createFakeData = ({imageProvider}: Config) =>\n  ({\n     type,\n     format,\n     minimum = 0,\n     maximum = 99999999,\n     minLength = 0,\n     maxLength = 500,\n     ...rest\n  }: Schema) => {\n  if (rest.enum) { return createEnum(rest.enum); }\n  if ('nullable' in rest && random.boolean()) { return null; }\n\n  if (format === 'date') { return createDate(); }\n  if (format === 'image') { return createImageLink(imageProvider); }\n\n  if (type === 'string') { return createString(format)(minLength, maxLength); }\n  if (isNumber(type)) { return createNumber(minimum, maximum); }\n  if (type === 'boolean') { return createBoolean(); }\n};\n\nconst generateArrayItems = ({minItems = 0, maxItems = 15, items}: Schema) => {\n  const arrayLength = random.int(minItems, maxItems);\n  return new Array(arrayLength).fill(items);\n};\n\nexport const mockData: (cfg: Config) => Processor = ({imageProvider}) => (params, model) => {\n  return processor(\n    createFakeData({\n      imageProvider\n    }),\n    { items: generateArrayItems },\n    getResponse(model)\n  );\n};\n"],"file":"index.js"}