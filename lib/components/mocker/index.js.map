{"version":3,"sources":["../../../src/components/mocker/index.js"],"names":["formatFakerTypes","type","createFakeData","format","min","max","minLength","maxLength","rest","enum","random","boolean","faker","data","between","normalizeType","ftype","includes","props","number","words","int","mock","schema","properties","reduce","result","key","property","combiner","items","oneOf","anyOf","allOf","minItems","maxItems","Array","fill","map","mockData","params","model","responseModel"],"mappings":"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","sourcesContent":["import faker from 'faker';\nimport random from 'random';\nimport { entries, objectPath, randomElement } from \"../../utils/utils\";\nimport { getResponse, resolveRef } from \"../parser\";\nimport type { Processor } from \"../router\";\nimport type { Schema } from \"../../types/Swagger\";\nimport { allOf, anyOf, oneOf } from \"./combiners\";\n\nconst formatFakerTypes = (type) => {\n  switch(type) {\n    case 'number':\n    case 'integer':\n      return 'number';\n    case 'string':\n      return 'words';\n    default:\n      return type;\n  }\n};\n\nconst createFakeData = ({type, format, min = 0, max = 99999999, minLength = 0, maxLength = 100, ...rest}) => {\n  if ('enum' in rest) { return randomElement(rest.enum); }\n  if ('nullable' in rest && random.boolean()) { return null; }\n  if ('date' in rest && random.boolean()) { return faker.data.between('2015-01-01', '2021-01-01'); }\n\n  const normalizeType = formatFakerTypes(type);\n  const ftype = format && format.includes('.') ? objectPath(faker, format) : faker.random[normalizeType];\n  const props = {\n    number: {min, max},\n    words: random.int(minLength, maxLength)\n  };\n  return ftype(props[normalizeType]);\n};\n\nconst mock = (schema: Schema) => {\n  if ('$ref' in schema) {\n    return mock(resolveRef(schema));\n  }\n\n  if ('properties' in schema) {\n    return entries(schema.properties).reduce((result, [key, property]) => {\n      result[key] = mock(property);\n      return result;\n    }, {});\n  }\n\n  if ('items' in schema) {\n    let combiner = () => schema.items;\n    if ('oneOf' in schema.items) {combiner = oneOf(schema.items.oneOf)}\n    if ('anyOf' in schema.items) {combiner = anyOf(schema.items.anyOf)}\n    if ('allOf' in schema.items) {combiner = allOf(schema.items.allOf)}\n    const min = schema.minItems || 0;\n    const max = schema.maxItems || 15;\n\n    return new Array(random.int(min, max)).fill().map(() => mock(combiner()));\n  }\n\n  if ('oneOf' in schema || 'anyOf' in schema || 'allOf' in schema) {\n    let combiner = () => schema;\n    if ('oneOf' in schema) {combiner = oneOf(schema.oneOf)}\n    if ('anyOf' in schema) {combiner = anyOf(schema.anyOf)}\n    if ('allOf' in schema) {combiner = allOf(schema.allOf)}\n\n    return mock(combiner());\n  }\n\n  return createFakeData(schema);\n};\n\nexport const mockData: Processor = (params, model) => {\n  const responseModel = getResponse(model);\n  return mock(responseModel);\n};\n"],"file":"index.js"}