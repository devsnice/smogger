{"version":3,"sources":["../../../src/components/mocker/index.js"],"names":["createEnum","enumElements","createDate","faker","date","between","createBoolean","random","boolean","createImageLink","createNumber","min","max","isFloat","options","float","number","createString","format","wordsCount","int","words","slice","isNumber","type","createFakeData","minimum","maximum","minLength","maxLength","rest","enum","generateArrayItems","minItems","maxItems","items","arrayLength","Array","fill","mockData","params","model"],"mappings":"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","sourcesContent":["import faker from 'faker';\nimport random from 'random';\nimport { randomElement } from \"../../utils/utils\";\nimport { getResponse, processor } from \"../parser\";\nimport type { Processor } from \"../router\";\nimport type { Schema } from \"../../types/Swagger\";\n\nconst createEnum = (enumElements: Array<string>) => randomElement(enumElements);\nconst createDate = () => faker.date.between('2015-01-01', '2021-01-01');\nconst createBoolean = () => random.boolean();\nconst createImageLink = () => 'https://picsum.photos/200/300/?random';\nconst createNumber = (min: number = 0, max: number = 99999999, isFloat: boolean) => {\n  const options = {min, max};\n  return isFloat ? faker.random.float(options) : faker.random.number(options);\n};\nconst createString = (format: string = 'words') => (min: number, max: number) => {\n  const wordsCount: number = random.int(min, max);\n  const words = faker.random[format](wordsCount);\n  return words.slice(0, max);\n};\n\nconst isFloat = (format) => (format === 'float' || format === 'double');\nconst isNumber = (type) => (type === 'number' || type === 'integer');\n\nconst createFakeData = ({type, format, minimum = 0, maximum = 99999999, minLength = 0, maxLength = 500, ...rest}) => {\n  if ('enum' in rest) { return createEnum(rest.enum); }\n  if ('nullable' in rest && random.boolean()) { return null; }\n\n  if (format === 'date') { return createDate(); }\n  if (format === 'image') { return createImageLink(); }\n\n  if (type === 'string') { return createString(format)(minLength, maxLength); }\n  if (isNumber(type)) { return createNumber(minimum, maximum, isFloat(format)); }\n  if (type === 'boolean') { return createBoolean(); }\n};\n\nconst generateArrayItems = ({minItems = 0, maxItems = 15, items}: Schema) => {\n  const arrayLength = random.int(minItems, maxItems);\n  return new Array(arrayLength).fill(items);\n};\n\nexport const mockData: Processor = (params, model) => {\n  return processor(\n    createFakeData,\n    { items: generateArrayItems },\n    getResponse(model)\n  );\n};\n"],"file":"index.js"}