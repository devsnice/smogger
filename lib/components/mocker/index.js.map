{"version":3,"sources":["../../../src/components/mocker/index.js"],"names":["formatFakerTypes","type","createFakeData","format","minimum","maximum","minLength","maxLength","rest","enum","random","boolean","faker","date","between","normalizeType","ftype","includes","props","number","words","int","mockData","params","model","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAGA,MAAMA,gBAAgB,GAAIC,IAAD,IAAU;AACjC,UAAOA,IAAP;AACE,SAAK,QAAL;AACA,SAAK,SAAL;AACE,aAAO,QAAP;;AACF,SAAK,QAAL;AACE,aAAO,OAAP;;AACF;AACE,aAAOA,IAAP;AAPJ;AASD,CAVD;;AAYA,MAAMC,cAAc,GAAG,CAAC;AAACD,EAAAA,IAAD;AAAOE,EAAAA,MAAP;AAAeC,EAAAA,OAAO,GAAG,CAAzB;AAA4BC,EAAAA,OAAO,GAAG,QAAtC;AAAgDC,EAAAA,SAAS,GAAG,CAA5D;AAA+DC,EAAAA,SAAS,GAAG,GAA3E;AAAgF,KAAGC;AAAnF,CAAD,KAA8F;AACnH,MAAI,UAAUA,IAAd,EAAoB;AAAE,WAAO,0BAAcA,IAAI,CAACC,IAAnB,CAAP;AAAkC;;AACxD,MAAI,cAAcD,IAAd,IAAsBE,gBAAOC,OAAP,EAA1B,EAA4C;AAAE,WAAO,IAAP;AAAc;;AAC5D,MAAIR,MAAM,KAAK,MAAf,EAAuB;AAAE,WAAOS,eAAMC,IAAN,CAAWC,OAAX,CAAmB,YAAnB,EAAiC,YAAjC,CAAP;AAAwD;;AACjF,MAAIX,MAAM,KAAK,OAAf,EAAwB;AAAE,WAAO,uCAAP;AAAiD;;AAE3E,QAAMY,aAAa,GAAGf,gBAAgB,CAACC,IAAD,CAAtC;AACA,QAAMe,KAAK,GAAGb,MAAM,IAAIA,MAAM,CAACc,QAAP,CAAgB,GAAhB,CAAV,GAAiC,uBAAWL,cAAX,EAAkBT,MAAlB,CAAjC,GAA6DS,eAAMF,MAAN,CAAaK,aAAb,CAA3E;;AACA,MAAIZ,MAAM,IAAIA,MAAM,CAACc,QAAP,CAAgB,GAAhB,CAAd,EAAoC;AAAC;AAAS;;AAC9C,QAAMC,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAE;AAACf,MAAAA,OAAD;AAAUC,MAAAA;AAAV,KADI;AAEZe,IAAAA,KAAK,EAAEV,gBAAOW,GAAP,CAAWf,SAAX,EAAsBC,SAAtB;AAFK,GAAd;AAIA,SAAOS,KAAK,CAACE,KAAK,CAACH,aAAD,CAAN,CAAZ;AACD,CAdD;;AAgBO,MAAMO,QAAmB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACpD,QAAM,IAAIC,KAAJ,CAAU,OAAV,CAAN;AACA,SAAO,uBACL,yBAAYD,KAAZ,CADK,EAELtB,cAFK,CAAP;AAID,CANM","sourcesContent":["import faker from 'faker';\nimport random from 'random';\nimport { objectPath, randomElement } from \"../../utils/utils\";\nimport { getResponse, processor } from \"../parser\";\nimport type { Processor } from \"../router\";\n\nconst formatFakerTypes = (type) => {\n  switch(type) {\n    case 'number':\n    case 'integer':\n      return 'number';\n    case 'string':\n      return 'words';\n    default:\n      return type;\n  }\n};\n\nconst createFakeData = ({type, format, minimum = 0, maximum = 99999999, minLength = 0, maxLength = 100, ...rest}) => {\n  if ('enum' in rest) { return randomElement(rest.enum); }\n  if ('nullable' in rest && random.boolean()) { return null; }\n  if (format === 'date') { return faker.date.between('2015-01-01', '2021-01-01'); }\n  if (format === 'image') { return 'https://picsum.photos/200/300/?random'; }\n\n  const normalizeType = formatFakerTypes(type);\n  const ftype = format && format.includes('.') ? objectPath(faker, format) : faker.random[normalizeType];\n  if (format && format.includes('.')) {debugger}\n  const props = {\n    number: {minimum, maximum},\n    words: random.int(minLength, maxLength)\n  };\n  return ftype(props[normalizeType]);\n};\n\nexport const mockData: Processor = (params, model) => {\n  throw new Error('ooops');\n  return processor(\n    getResponse(model),\n    createFakeData\n  );\n};\n"],"file":"index.js"}